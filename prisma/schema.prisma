// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  githubLink     String?
  linkedinLink   String?
  email          String   @unique
  image          String?
  job            String?
  adminCreate    User?    @relation("adminCreate", fields: [createdBy], references: [id])
  adminUpdate    User?    @relation("adminUpdate", fields: [updatedBy], references: [id])
  createdAt      DateTime? @default(now())
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  accounts       Account[]
  sessions       Session[]
  blogCreated    Blog[]    @relation("UserCreate")
  blogUpdated    Blog[]    @relation("UserUpdate")
  usersCreated   User[]    @relation("adminCreate")
  usersUpdated   User[]    @relation("adminUpdate")
  adminCreated   Admin[]   @relation("otherAdminCreate")
  adminUpdated   Admin[]   @relation("otherAdminUpdate")
  erUser         EventRegistration[] @relation("erUser")
  ebSpeaker      EventBadge[] @relation("ebSpeaker")
  badgeCreated   Badge[]   @relation("badgeCreate")
  badgeUpdated   Badge[]   @relation("badgeUpdate")
  eventCreated   Event[]   @relation("eventCreate")
  eventUpdated   Event[]   @relation("eventUpdate")
  socmedCreated  Socmed[]  @relation("socmedCreate")
  socmedUpdated  Socmed[]  @relation("socmedUpdate")
  erCreated      EventRegistration[]  @relation("erCreate")
  erUpdated      EventRegistration[]  @relation("erUpdate")
  ebCreated      EventBadge[]  @relation("ebCreate")
  ebUpdated      EventBadge[]  @relation("ebUpdate")
  epCreated      EventPoint[]  @relation("epCreate")
  epUpdated      EventPoint[]  @relation("epUpdate")
}

model Admin {
  id                  String    @id @default(cuid())
  email               String   @unique
  otherAdminCreate    User?    @relation("otherAdminCreate", fields: [createdBy], references: [id])
  otherAdminUpdate    User?    @relation("otherAdminUpdate", fields: [updatedBy], references: [id])
  createdAt           DateTime? @default(now())
  createdBy           String?
  updatedAt           DateTime?
  updatedBy           String?
}

model Blog {
  id                String      @id @default(cuid())
  title             String
  body              String
  status            Int         @default(1)
  tags              TagsOnBlogs[]
  UserCreate        User?       @relation("UserCreate", fields: [createdBy], references: [id])
  UserUpdate        User?       @relation("UserUpdate", fields: [updatedBy], references: [id])
  createdAt         DateTime? @default(now())
  createdBy         String?
  updatedAt         DateTime?
  updatedBy         String?
}

model BlogTag {
  id                String    @id @default(cuid())
  blog              TagsOnBlogs[]
  title             String
}

model TagsOnBlogs {
  blog              Blog  @relation(fields: [blogId], references: [id])
  blogId            String
  tag               BlogTag   @relation(fields: [tagId], references: [id])
  tagId             String

  @@id([blogId, tagId])
}

model Badge {
  id             String   @id @default(cuid())
  title          String
  description    String
  img            String
  badgeCreate    User?    @relation("badgeCreate", fields: [createdBy], references: [id])
  badgeUpdate    User?    @relation("badgeUpdate", fields: [updatedBy], references: [id])
  createdAt      DateTime? @default(now())
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  ebBadge        EventBadge[] @relation("ebBadge")
}

model Event {
  id             String   @id @default(cuid())
  title          String
  quota          Int?
  place          String
  dateTime       DateTime
  duration       Int?
  description    String?
  banner         String?
  map            String?
  eventCreate    User?    @relation("eventCreate", fields: [createdBy], references: [id])
  eventUpdate    User?    @relation("eventUpdate", fields: [updatedBy], references: [id])
  fee            Int?
  createdAt      DateTime? @default(now())
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  erEvent        EventRegistration[] @relation("erEvent")
  ebEvent        EventBadge[] @relation("ebEvent")
}

model EventBadge {
  id             String   @id @default(cuid())
  ebEvent        Event    @relation("ebEvent", fields: [event], references: [id])
  event          String
  ebBadge        Badge    @relation("ebBadge", fields: [badge], references: [id])
  badge          String
  ebSpeaker      User     @relation("ebSpeaker", fields: [speaker], references: [id])
  speaker        String
  ebCreate       User?    @relation("ebCreate", fields: [createdBy], references: [id])
  ebUpdate       User?    @relation("ebUpdate", fields: [updatedBy], references: [id])
  createdAt      DateTime? @default(now())
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  epEb           EventPoint[] @relation("epEb")
}

model Socmed {
  id                String      @id @default(cuid())
  type              String
  url               String
  socmedCreate      User?      @relation("socmedCreate", fields: [createdBy], references: [id])
  socmedUpdate      User?      @relation("socmedUpdate", fields: [updatedBy], references: [id])
  createdAt         DateTime? @default(now())
  createdBy         String?
  updatedAt         DateTime?
  updatedBy         String?
}

model EventRegistration {
  id             String      @id @default(cuid())
  erUser         User        @relation("erUser", fields: [user], references: [id])
  user           String
  erEvent        Event       @relation("erEvent", fields: [event], references: [id])
  event          String
  attend         Int         @default(0)
  rsvp_link      String
  erCreate       User?      @relation("erCreate", fields: [createdBy], references: [id])
  erUpdate       User?      @relation("erUpdate", fields: [updatedBy], references: [id])
  createdAt      DateTime?  @default(now())
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  epEr           EventPoint[] @relation("epEr")
}

model EventPoint {
  id                String       @id @default(cuid())
  epEr              EventRegistration  @relation("epEr", fields: [eventRegistration], references: [id])
  eventRegistration String
  epEb              EventBadge   @relation("epEb", fields: [eventBadge], references: [id])
  eventBadge        String
  point             Int          @default(1)
  epCreate          User?    @relation("epCreate", fields: [createdBy], references: [id])
  epUpdate          User?    @relation("epUpdate", fields: [updatedBy], references: [id])
  createdAt         DateTime? @default(now())
  createdBy         String?
  updatedAt         DateTime?
  updatedBy         String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
