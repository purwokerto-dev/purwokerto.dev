// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  username       String
  password       String
  firstName      String
  lastName       String?
  githubLink     String?
  linkedinLink   String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  adminCreate    Admin?    @relation("adminCreate", fields: [createdBy], references: [id])
  adminUpdate    Admin?    @relation("adminUpdate", fields: [updatedBy], references: [id])
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
  accounts       Account[]
  sessions       Session[]
  blogCreated    Blog[]    @relation("UserCreate")
  blogUpdated    Blog[]    @relation("UserUpdate")
}

model Admin {
  id                  String    @id @default(cuid())
  username            String
  password            String
  name                String
  otherAdminCreate    Admin?    @relation("otherAdminCreate", fields: [createdBy], references: [id])
  otherAdminUpdate    Admin?    @relation("otherAdminUpdate", fields: [updatedBy], references: [id])
  createdAt           DateTime?
  createdBy           String?
  updatedAt           DateTime?
  updatedBy           String?
  usersCreated        User[]    @relation("adminCreate")
  usersUpdated        User[]    @relation("adminUpdate")
  adminCreated        Admin[]   @relation("otherAdminCreate")
  adminUpdated        Admin[]   @relation("otherAdminUpdate")
  badgeCreated        Badge[]   @relation("badgeCreate")
  badgeUpdated        Badge[]   @relation("badgeUpdate")
  eventCreated        Event[]   @relation("eventCreate")
  eventUpdated        Event[]   @relation("eventUpdate")
  socmedCreated       Socmed[]  @relation("socmedCreate")
  socmedUpdated       Socmed[]  @relation("socmedUpdate")
}

model Blog {
  id                String      @id @default(cuid())
  title             String
  body              String
  status            Int         @default(1)
  tags              TagsOnBlogs[]
  UserCreate        User?       @relation("UserCreate", fields: [createdBy], references: [id])
  UserUpdate        User?       @relation("UserUpdate", fields: [updatedBy], references: [id])
  createdAt         DateTime?
  createdBy         String?
  updatedAt         DateTime?
  updatedBy         String?
}

model BlogTag {
  id                String    @id @default(cuid())
  blog              TagsOnBlogs[]
  title             String
}

model TagsOnBlogs {
  blog              Blog  @relation(fields: [blogId], references: [id])
  blogId            String
  tag               BlogTag   @relation(fields: [tagId], references: [id])
  tagId             String

  @@id([blogId, tagId])
}

model Badge {
  id             String   @id @default(cuid())
  title          String
  description    String
  img            String
  badgeCreate    Admin?    @relation("badgeCreate", fields: [createdBy], references: [id])
  badgeUpdate    Admin?    @relation("badgeUpdate", fields: [updatedBy], references: [id])
  badgeEvent     Event[]   @relation("eventBadge")
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

model Event {
  id             String   @id @default(cuid())
  title          String
  quota          Int?
  place          String
  dateTime       DateTime
  duration       Int?
  description    String?
  eventBadge     Badge?    @relation("eventBadge", fields: [badgeReward], references: [id])
  eventCreate    Admin?    @relation("eventCreate", fields: [createdBy], references: [id])
  eventUpdate    Admin?    @relation("eventUpdate", fields: [updatedBy], references: [id])
  badgeReward    String?
  fee            Int?
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

model Socmed {
  id                String      @id @default(cuid())
  name              String
  link              String
  socmedCreate      Admin?      @relation("socmedCreate", fields: [createdBy], references: [id])
  socmedUpdate      Admin?      @relation("socmedUpdate", fields: [updatedBy], references: [id])
  createdAt         DateTime?
  createdBy         String?
  updatedAt         DateTime?
  updatedBy         String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
